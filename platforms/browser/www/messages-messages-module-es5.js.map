{"version":3,"sources":["webpack:///src/app/messages/messages.page.ts","webpack:///src/app/messages/messages.page.html","webpack:///src/app/messages/messages.module.ts","webpack:///src/app/messages/messages.page.scss"],"names":["MessagesPage","router","afAuth","firestore","loadingProvider","dataProvider","searchFriend","show","getConversations","snapshotChanges","subscribe","conversationsInfoRes","conversations","console","log","map","c","key","payload","doc","id","data","length","forEach","conversation","getUser","get","user","friend","getConversation","conversationId","obj","lastMessage","messages","date","sender","unreadMessagesCount","messagesRead","type","auth","currentUser","uid","message","addOrUpdateConversation","hide","that","updateDateTime","setInterval","Date","index","i","push","sort","a","b","date1","date2","userId","navigateByUrl","selector","template","routes","path","component","MessagesPageModule","imports","forChild","declarations"],"mappings":"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","file":"messages-messages-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { LoadingService } from '../services/loading.service';\r\nimport { DataService } from '../services/data.service';\r\nimport { AngularFireAuth } from '@angular/fire/auth';\r\nimport { AngularFirestore } from '@angular/fire/firestore';\r\n\r\n@Component({\r\n  selector: 'app-messages',\r\n  templateUrl: './messages.page.html',\r\n  styleUrls: ['./messages.page.scss'],\r\n})\r\nexport class MessagesPage implements OnInit {\r\n\r\n  conversations: any;\r\n  updateDateTime: any;\r\n  searchFriend: any = '';\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private afAuth: AngularFireAuth,\r\n    private firestore: AngularFirestore,\r\n    private loadingProvider: LoadingService,\r\n    private dataProvider: DataService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ionViewDidEnter() {\r\n    this.loadingProvider.show();\r\n\r\n    // Get info of conversations of current logged in user.\r\n    this.dataProvider.getConversations().snapshotChanges().subscribe((conversationsInfoRes: any) => {\r\n      let conversations = [];\r\n      console.log('conversationsInfoRes',conversationsInfoRes);\r\n      conversations = conversationsInfoRes.map(c => ({ key: c.payload.doc.id, ...c.payload.doc.data() }));\r\n      \r\n      console.log('conversations:', conversations);\r\n      if (conversations.length > 0) {\r\n        conversations.forEach((conversation) => {\r\n          console.log('conversation',conversation);\r\n          if (conversation) {\r\n            // Get conversation partner info.\r\n            this.dataProvider.getUser(conversation.key).get().subscribe((user) => {\r\n              conversation.friend = user.data();\r\n              // Get conversation info.\r\n\r\n              this.dataProvider.getConversation(conversation.conversationId).snapshotChanges().subscribe((obj: any) => {\r\n                // Get last message of conversation.\r\n                console.log(obj.payload.data());\r\n                if (obj.payload.data() != null) {\r\n                  let lastMessage = obj.payload.data().messages[obj.payload.data().messages.length - 1];\r\n                  conversation.date = lastMessage.date;\r\n                  conversation.sender = lastMessage.sender;\r\n                  // Set unreadMessagesCount\r\n                  conversation.unreadMessagesCount = obj.payload.data().messages.length - conversation.messagesRead;\r\n                  console.log(obj.payload.data().messages.length + \"-\" + conversation.messagesRead);\r\n                  console.log(conversation.unreadMessagesCount);\r\n                  // Process last message depending on messageType.\r\n                  if (lastMessage.type == 'text') {\r\n                    if (lastMessage.sender == this.afAuth.auth.currentUser.uid) {\r\n                      conversation.message = 'You: ' + lastMessage.message;\r\n                    } else {\r\n                      conversation.message = lastMessage.message;\r\n                    }\r\n                  } else {\r\n                    if (lastMessage.sender == this.afAuth.auth.currentUser.uid) {\r\n                      conversation.message = 'You sent a photo message.';\r\n                    } else {\r\n                      conversation.message = 'has sent you a photo message.';\r\n                    }\r\n                  }\r\n                  // Add or update conversation.\r\n                  this.addOrUpdateConversation(conversation);\r\n                }\r\n              });\r\n            });\r\n          }\r\n\r\n        });\r\n\r\n        this.loadingProvider.hide();\r\n      }\r\n      else {\r\n        this.conversations = [];\r\n        this.loadingProvider.hide();\r\n      }\r\n    });\r\n\r\n    // Update conversations' last active date time elapsed every minute based on Moment.js.\r\n    var that = this;\r\n    if (!that.updateDateTime) {\r\n      that.updateDateTime = setInterval(function () {\r\n        if (that.conversations) {\r\n          that.conversations.forEach((conversation) => {\r\n            let date = conversation.date;\r\n            conversation.date = new Date(date);\r\n          });\r\n        }\r\n      }, 60000);\r\n    }\r\n  }\r\n\r\n  // Add or update conversation for real-time sync based on our observer, sort by active date.\r\n  addOrUpdateConversation(conversation) {\r\n    if (!this.conversations) {\r\n      this.conversations = [conversation];\r\n    } else {\r\n      var index = -1;\r\n      for (var i = 0; i < this.conversations.length; i++) {\r\n        if (this.conversations[i].key == conversation.key) {\r\n          index = i;\r\n        }\r\n      }\r\n      if (index > -1) {\r\n        this.conversations[index] = conversation;\r\n      } else {\r\n        this.conversations.push(conversation);\r\n      }\r\n      // Sort by last active date.\r\n      this.conversations.sort((a: any, b: any) => {\r\n        let date1 = new Date(a.date);\r\n        let date2 = new Date(b.date);\r\n        if (date1 > date2) {\r\n          return -1;\r\n        } else if (date1 < date2) {\r\n          return 1;\r\n        } else {\r\n          return 0;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // Open chat with friend.\r\n  message(userId) {\r\n    this.router.navigateByUrl('/message/' + userId)\r\n    // this.app.getRootNav().push(MessagePage, { userId: userId });\r\n  }\r\n\r\n  // Return class based if conversation has unreadMessages or not.\r\n  hasUnreadMessages(conversation) {\r\n    if (conversation.unreadMessagesCount > 0) {\r\n      return 'bold';\r\n    } else\r\n      return '';\r\n  }\r\n\r\n}\r\n","export default \"<ion-header>\\r\\n  <ion-toolbar color=\\\"secondary\\\">\\r\\n    <ion-buttons slot=\\\"start\\\">\\r\\n      <ion-back-button></ion-back-button>\\r\\n    </ion-buttons>\\r\\n    <ion-title>Messages</ion-title>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content>\\r\\n  <div class=\\\"empty-list\\\" *ngIf=\\\"conversations && conversations.length <= 0\\\">\\r\\n    <h1>\\r\\n      <ion-icon name=\\\"text\\\"></ion-icon>\\r\\n    </h1>\\r\\n    <p>No new conversation yet.</p>\\r\\n  </div>\\r\\n  <!-- Show conversations -->\\r\\n  <ion-list lines=\\\"none\\\" *ngIf=\\\"conversations && conversations.length > 0\\\">\\r\\n    <ion-searchbar [(ngModel)]=\\\"searchFriend\\\" placeholder=\\\"Search for friend or username\\\" showCancelButton=\\\"true\\\"\\r\\n      cancelButtonText=\\\"Done\\\"></ion-searchbar>\\r\\n    <div *ngFor=\\\"let conversation of conversations | conversationFilter:searchFriend\\\"> \\r\\n      <ion-item *ngIf=\\\"conversation.blocked != true\\\" (click)=\\\"message(conversation.key)\\\">\\r\\n\\r\\n        <ion-avatar slot=\\\"start\\\" *ngIf=\\\"conversation.friend\\\">\\r\\n          <img src=\\\"{{conversation.friend.img}}\\\" onError=\\\"this.src='./assets/images/default-dp.png'\\\">\\r\\n        </ion-avatar>\\r\\n        <div [ngClass]=hasUnreadMessages(conversation)>\\r\\n          <ion-label>\\r\\n            <ion-text>\\r\\n              <h2 *ngIf=\\\"conversation.friend\\\">{{conversation.friend.name}}</h2>\\r\\n            </ion-text>\\r\\n            <ion-text>\\r\\n              <p>{{conversation.message}}</p>\\r\\n            </ion-text>\\r\\n          </ion-label>\\r\\n        </div>\\r\\n        <div slot=\\\"end\\\" style=\\\"display: flex;flex-direction: column;align-items: flex-end;\\\">\\r\\n          <ion-badge color=\\\"danger\\\" *ngIf=\\\"conversation.unreadMessagesCount > 0\\\">\\r\\n            {{conversation.unreadMessagesCount}}\\r\\n          </ion-badge>\\r\\n          <ion-text style=\\\"color: #777;font-size: 12px;\\\">{{conversation.date | DateFormat}}</ion-text>\\r\\n        </div>\\r\\n      </ion-item>\\r\\n    </div>\\r\\n  </ion-list>\\r\\n\\r\\n</ion-content>\";","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { MessagesPage } from './messages.page';\r\nimport { SharedModule } from '../services/share.module';\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: MessagesPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    SharedModule,\r\n    RouterModule.forChild(routes)\r\n  ],\r\n  declarations: [\r\n    MessagesPage\r\n  ]\r\n})\r\nexport class MessagesPageModule {}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21lc3NhZ2VzL21lc3NhZ2VzLnBhZ2Uuc2NzcyJ9 */\";"]}