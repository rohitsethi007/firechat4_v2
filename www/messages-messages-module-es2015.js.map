{"version":3,"sources":["./src/app/messages/messages.page.html","./src/app/messages/messages.module.ts","./src/app/messages/messages.page.scss","./src/app/messages/messages.page.ts"],"names":[],"mappings":"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","file":"messages-messages-module-es2015.js","sourcesContent":["export default \"<ion-header>\\r\\n  <ion-toolbar color=\\\"primary\\\">\\r\\n    <ion-title>Messages</ion-title>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content>\\r\\n  <div class=\\\"empty-list\\\" *ngIf=\\\"conversations && conversations.length <= 0\\\">\\r\\n    <h1>\\r\\n      <ion-icon name=\\\"text\\\"></ion-icon>\\r\\n    </h1>\\r\\n    <p>No new conversation yet.</p>\\r\\n  </div>\\r\\n  <!-- Show conversations -->\\r\\n  <ion-list lines=\\\"none\\\" *ngIf=\\\"conversations && conversations.length > 0\\\">\\r\\n    <ion-searchbar [(ngModel)]=\\\"searchFriend\\\" placeholder=\\\"Search for friend or username\\\" showCancelButton=\\\"true\\\"\\r\\n      cancelButtonText=\\\"Done\\\"></ion-searchbar>\\r\\n    <div *ngFor=\\\"let conversation of conversations | conversationFilter:searchFriend\\\">\\r\\n      <ion-item *ngIf=\\\"conversation.blocked != true\\\" (click)=\\\"message(conversation.key)\\\">\\r\\n\\r\\n        <ion-avatar slot=\\\"start\\\" *ngIf=\\\"conversation.friend\\\">\\r\\n          <img src=\\\"{{conversation.friend.img}}\\\" onError=\\\"this.src='./assets/images/default-dp.png'\\\">\\r\\n        </ion-avatar>\\r\\n        <div [ngClass]=hasUnreadMessages(conversation)>\\r\\n          <ion-label>\\r\\n            <ion-text>\\r\\n              <h2 *ngIf=\\\"conversation.friend\\\">{{conversation.friend.name}}</h2>\\r\\n            </ion-text>\\r\\n            <ion-text>\\r\\n              <p>{{conversation.message}}</p>\\r\\n            </ion-text>\\r\\n          </ion-label>\\r\\n        </div>\\r\\n        <div slot=\\\"end\\\" style=\\\"display: flex;flex-direction: column;align-items: flex-end;\\\">\\r\\n          <ion-badge color=\\\"danger\\\" *ngIf=\\\"conversation.unreadMessagesCount > 0\\\">\\r\\n            {{conversation.unreadMessagesCount}}\\r\\n          </ion-badge>\\r\\n          <ion-text style=\\\"color: #777;font-size: 12px;\\\">{{conversation.date | DateFormat}}</ion-text>\\r\\n        </div>\\r\\n      </ion-item>\\r\\n    </div>\\r\\n  </ion-list>\\r\\n\\r\\n</ion-content>\"","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { MessagesPage } from './messages.page';\r\nimport { SharedModule } from '../services/share.module';\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: MessagesPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    SharedModule,\r\n    RouterModule.forChild(routes)\r\n  ],\r\n  declarations: [\r\n    MessagesPage\r\n  ]\r\n})\r\nexport class MessagesPageModule {}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21lc3NhZ2VzL21lc3NhZ2VzLnBhZ2Uuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { LoadingService } from '../services/loading.service';\r\nimport { DataService } from '../services/data.service';\r\nimport { AngularFireAuth } from '@angular/fire/auth';\r\nimport { AngularFirestore } from '@angular/fire/firestore';\r\n\r\n@Component({\r\n  selector: 'app-messages',\r\n  templateUrl: './messages.page.html',\r\n  styleUrls: ['./messages.page.scss'],\r\n})\r\nexport class MessagesPage implements OnInit {\r\n\r\n  conversations: any;\r\n  updateDateTime: any;\r\n  searchFriend: any = '';\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private afAuth: AngularFireAuth,\r\n    private firestore: AngularFirestore,\r\n    private loadingProvider: LoadingService,\r\n    private dataProvider: DataService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ionViewDidEnter() {\r\n    this.loadingProvider.show();\r\n\r\n    // Get info of conversations of current logged in user.\r\n    this.dataProvider.getConversations().snapshotChanges().subscribe((conversationsInfoRes: any) => {\r\n\r\n      let conversations = [];\r\n      conversations = conversationsInfoRes.map(c => ({ key: c.key, ...c.payload.data() }));\r\n\r\n      console.log(conversations);\r\n\r\n      if (conversations.length > 0) {\r\n        conversations.forEach((conversation) => {\r\n          console.log(conversation);\r\n          if (conversation) {\r\n            // Get conversation partner info.\r\n            this.dataProvider.getUser(conversation.key).get().subscribe((user) => {\r\n              conversation.friend = user.data;\r\n              // Get conversation info.\r\n\r\n              this.dataProvider.getConversation(conversation.conversationId).snapshotChanges().subscribe((obj: any) => {\r\n                // Get last message of conversation.\r\n                console.log(obj.payload.data());\r\n                if (obj.payload.data() != null) {\r\n                  let lastMessage = obj.payload.data().messages[obj.payload.data().messages.length - 1];\r\n                  conversation.date = lastMessage.date;\r\n                  conversation.sender = lastMessage.sender;\r\n                  // Set unreadMessagesCount\r\n                  conversation.unreadMessagesCount = obj.payload.data().messages.length - conversation.messagesRead;\r\n                  console.log(obj.payload.data().messages.length + \"-\" + conversation.messagesRead);\r\n                  console.log(conversation.unreadMessagesCount);\r\n                  // Process last message depending on messageType.\r\n                  if (lastMessage.type == 'text') {\r\n                    if (lastMessage.sender == this.afAuth.auth.currentUser.uid) {\r\n                      conversation.message = 'You: ' + lastMessage.message;\r\n                    } else {\r\n                      conversation.message = lastMessage.message;\r\n                    }\r\n                  } else {\r\n                    if (lastMessage.sender == this.afAuth.auth.currentUser.uid) {\r\n                      conversation.message = 'You sent a photo message.';\r\n                    } else {\r\n                      conversation.message = 'has sent you a photo message.';\r\n                    }\r\n                  }\r\n                  // Add or update conversation.\r\n                  this.addOrUpdateConversation(conversation);\r\n                }\r\n              });\r\n            });\r\n          }\r\n\r\n        });\r\n\r\n        this.loadingProvider.hide();\r\n      }\r\n      else {\r\n        this.conversations = [];\r\n        this.loadingProvider.hide();\r\n      }\r\n    });\r\n\r\n    // Update conversations' last active date time elapsed every minute based on Moment.js.\r\n    var that = this;\r\n    if (!that.updateDateTime) {\r\n      that.updateDateTime = setInterval(function () {\r\n        if (that.conversations) {\r\n          that.conversations.forEach((conversation) => {\r\n            let date = conversation.date;\r\n            conversation.date = new Date(date);\r\n          });\r\n        }\r\n      }, 60000);\r\n    }\r\n  }\r\n\r\n  // Add or update conversation for real-time sync based on our observer, sort by active date.\r\n  addOrUpdateConversation(conversation) {\r\n    if (!this.conversations) {\r\n      this.conversations = [conversation];\r\n    } else {\r\n      var index = -1;\r\n      for (var i = 0; i < this.conversations.length; i++) {\r\n        if (this.conversations[i].key == conversation.key) {\r\n          index = i;\r\n        }\r\n      }\r\n      if (index > -1) {\r\n        this.conversations[index] = conversation;\r\n      } else {\r\n        this.conversations.push(conversation);\r\n      }\r\n      // Sort by last active date.\r\n      this.conversations.sort((a: any, b: any) => {\r\n        let date1 = new Date(a.date);\r\n        let date2 = new Date(b.date);\r\n        if (date1 > date2) {\r\n          return -1;\r\n        } else if (date1 < date2) {\r\n          return 1;\r\n        } else {\r\n          return 0;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // Open chat with friend.\r\n  message(userId) {\r\n    this.router.navigateByUrl('/message/' + userId)\r\n    // this.app.getRootNav().push(MessagePage, { userId: userId });\r\n  }\r\n\r\n  // Return class based if conversation has unreadMessages or not.\r\n  hasUnreadMessages(conversation) {\r\n    if (conversation.unreadMessagesCount > 0) {\r\n      return 'bold';\r\n    } else\r\n      return '';\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///"}