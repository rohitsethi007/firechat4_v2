{"version":3,"sources":["./src/app/messages/messages.page.html","./src/app/messages/messages.module.ts","./src/app/messages/messages.page.scss","./src/app/messages/messages.page.ts"],"names":[],"mappings":"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","file":"messages-messages-module-es2015.js","sourcesContent":["export default \"<ion-header>\\n  <ion-toolbar color=\\\"secondary\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button></ion-back-button>\\n    </ion-buttons>\\n    <ion-title>Messages</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <div class=\\\"empty-list\\\" *ngIf=\\\"conversations && conversations.length <= 0\\\">\\n    <h1>\\n      <ion-icon name=\\\"text\\\"></ion-icon>\\n    </h1>\\n    <p>No new conversation yet.</p>\\n  </div>\\n  <!-- Show conversations -->\\n  <ion-list lines=\\\"none\\\" *ngIf=\\\"conversations && conversations.length > 0\\\">\\n    <ion-searchbar [(ngModel)]=\\\"searchFriend\\\" placeholder=\\\"Search for friend or username\\\" showCancelButton=\\\"true\\\"\\n      cancelButtonText=\\\"Done\\\"></ion-searchbar>\\n    <div *ngFor=\\\"let conversation of conversations | conversationFilter:searchFriend\\\">\\n      <ion-item *ngIf=\\\"conversation.blocked != true\\\" (click)=\\\"message(conversation.key)\\\">\\n\\n        <ion-avatar slot=\\\"start\\\" *ngIf=\\\"conversation.friend\\\">\\n          <img src=\\\"{{conversation.friend.img}}\\\" onError=\\\"this.src='./assets/images/default-dp.png'\\\">\\n        </ion-avatar>\\n        <div [ngClass]=hasUnreadMessages(conversation)>\\n          <ion-label>\\n            <ion-text>\\n              <h2 *ngIf=\\\"conversation.friend\\\">{{conversation.friend.name}}</h2>\\n            </ion-text>\\n            <ion-text>\\n              <p>{{conversation.message}}</p>\\n            </ion-text>\\n          </ion-label>\\n        </div>\\n        <div slot=\\\"end\\\" style=\\\"display: flex;flex-direction: column;align-items: flex-end;\\\">\\n          <ion-badge color=\\\"danger\\\" *ngIf=\\\"conversation.unreadMessagesCount > 0\\\">\\n            {{conversation.unreadMessagesCount}}\\n          </ion-badge>\\n          <ion-text style=\\\"color: #777;font-size: 12px;\\\">{{conversation.date | DateFormat}}</ion-text>\\n        </div>\\n      </ion-item>\\n    </div>\\n  </ion-list>\\n\\n</ion-content>\"","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { MessagesPage } from './messages.page';\nimport { SharedModule } from '../services/share.module';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MessagesPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    SharedModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [\n    MessagesPage\n  ]\n})\nexport class MessagesPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21lc3NhZ2VzL21lc3NhZ2VzLnBhZ2Uuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { LoadingService } from '../services/loading.service';\nimport { DataService } from '../services/data.service';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { AngularFirestore } from '@angular/fire/firestore';\n\n@Component({\n  selector: 'app-messages',\n  templateUrl: './messages.page.html',\n  styleUrls: ['./messages.page.scss'],\n})\nexport class MessagesPage implements OnInit {\n\n  conversations: any;\n  updateDateTime: any;\n  searchFriend: any = '';\n\n  constructor(\n    private router: Router,\n    private afAuth: AngularFireAuth,\n    private firestore: AngularFirestore,\n    private loadingProvider: LoadingService,\n    private dataProvider: DataService\n  ) { }\n\n  ngOnInit() {\n  }\n\n  ionViewDidEnter() {\n    this.loadingProvider.show();\n\n    // Get info of conversations of current logged in user.\n    this.dataProvider.getConversations().snapshotChanges().subscribe((conversationsInfoRes: any) => {\n      let conversations = [];\n      console.log('conversationsInfoRes',conversationsInfoRes);\n      conversations = conversationsInfoRes.map(c => ({ key: c.payload.doc.id, ...c.payload.doc.data() }));\n      \n      console.log('conversations:', conversations);\n      if (conversations.length > 0) {\n        conversations.forEach((conversation) => {\n          console.log('conversation',conversation);\n          if (conversation) {\n            // Get conversation partner info.\n            this.dataProvider.getUser(conversation.key).get().subscribe((user) => {\n              conversation.friend = user.data();\n              // Get conversation info.\n\n              this.dataProvider.getConversation(conversation.conversationId).snapshotChanges().subscribe((obj: any) => {\n                // Get last message of conversation.\n                console.log(obj.payload.data());\n                if (obj.payload.data() != null) {\n                  let lastMessage = obj.payload.data().messages[obj.payload.data().messages.length - 1];\n                  conversation.date = lastMessage.date;\n                  conversation.sender = lastMessage.sender;\n                  // Set unreadMessagesCount\n                  conversation.unreadMessagesCount = obj.payload.data().messages.length - conversation.messagesRead;\n                  console.log(obj.payload.data().messages.length + \"-\" + conversation.messagesRead);\n                  console.log(conversation.unreadMessagesCount);\n                  // Process last message depending on messageType.\n                  if (lastMessage.type == 'text') {\n                    if (lastMessage.sender == this.afAuth.auth.currentUser.uid) {\n                      conversation.message = 'You: ' + lastMessage.message;\n                    } else {\n                      conversation.message = lastMessage.message;\n                    }\n                  } else {\n                    if (lastMessage.sender == this.afAuth.auth.currentUser.uid) {\n                      conversation.message = 'You sent a photo message.';\n                    } else {\n                      conversation.message = 'has sent you a photo message.';\n                    }\n                  }\n                  // Add or update conversation.\n                  this.addOrUpdateConversation(conversation);\n                }\n              });\n            });\n          }\n\n        });\n\n        this.loadingProvider.hide();\n      }\n      else {\n        this.conversations = [];\n        this.loadingProvider.hide();\n      }\n    });\n\n    // Update conversations' last active date time elapsed every minute based on Moment.js.\n    var that = this;\n    if (!that.updateDateTime) {\n      that.updateDateTime = setInterval(function () {\n        if (that.conversations) {\n          that.conversations.forEach((conversation) => {\n            let date = conversation.date;\n            conversation.date = new Date(date);\n          });\n        }\n      }, 60000);\n    }\n  }\n\n  // Add or update conversation for real-time sync based on our observer, sort by active date.\n  addOrUpdateConversation(conversation) {\n    if (!this.conversations) {\n      this.conversations = [conversation];\n    } else {\n      var index = -1;\n      for (var i = 0; i < this.conversations.length; i++) {\n        if (this.conversations[i].key == conversation.key) {\n          index = i;\n        }\n      }\n      if (index > -1) {\n        this.conversations[index] = conversation;\n      } else {\n        this.conversations.push(conversation);\n      }\n      // Sort by last active date.\n      this.conversations.sort((a: any, b: any) => {\n        let date1 = new Date(a.date);\n        let date2 = new Date(b.date);\n        if (date1 > date2) {\n          return -1;\n        } else if (date1 < date2) {\n          return 1;\n        } else {\n          return 0;\n        }\n      });\n    }\n  }\n\n  // Open chat with friend.\n  message(userId) {\n    this.router.navigateByUrl('/message/' + userId)\n    // this.app.getRootNav().push(MessagePage, { userId: userId });\n  }\n\n  // Return class based if conversation has unreadMessages or not.\n  hasUnreadMessages(conversation) {\n    if (conversation.unreadMessagesCount > 0) {\n      return 'bold';\n    } else\n      return '';\n  }\n\n}\n"],"sourceRoot":"webpack:///"}