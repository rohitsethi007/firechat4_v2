{"version":3,"sources":["src/app/messages/messages.page.html","src/app/messages/messages.module.ts","src/app/messages/messages.page.scss","src/app/messages/messages.page.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<ion-header>\\r\\n  <ion-toolbar color=\\\"secondary\\\">\\r\\n    <ion-buttons slot=\\\"start\\\">\\r\\n      <ion-back-button></ion-back-button>\\r\\n    </ion-buttons>\\r\\n    <ion-title>Messages</ion-title>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content>\\r\\n  <div class=\\\"empty-list\\\" *ngIf=\\\"conversations && conversations.length <= 0\\\">\\r\\n    <h1>\\r\\n      <ion-icon name=\\\"text\\\"></ion-icon>\\r\\n    </h1>\\r\\n    <p>No new conversation yet.</p>\\r\\n  </div>\\r\\n  <!-- Show conversations -->\\r\\n  <ion-list lines=\\\"none\\\" *ngIf=\\\"conversations && conversations.length > 0\\\">\\r\\n    <ion-searchbar [(ngModel)]=\\\"searchFriend\\\" placeholder=\\\"Search for friend or username\\\" showCancelButton=\\\"true\\\"\\r\\n      cancelButtonText=\\\"Done\\\"></ion-searchbar>\\r\\n    <div *ngFor=\\\"let conversation of conversations | conversationFilter:searchFriend\\\">\\r\\n      <ion-item *ngIf=\\\"conversation.blocked != true\\\" (click)=\\\"message(conversation.key)\\\">\\r\\n\\r\\n        <ion-avatar slot=\\\"start\\\" *ngIf=\\\"conversation.friend\\\">\\r\\n          <img src=\\\"{{conversation.friend.img}}\\\" onError=\\\"this.src='./assets/images/default-dp.png'\\\">\\r\\n        </ion-avatar>\\r\\n        <div [ngClass]=hasUnreadMessages(conversation)>\\r\\n          <ion-label>\\r\\n            <ion-text>\\r\\n              <h2 *ngIf=\\\"conversation.friend\\\">{{conversation.friend.name}}</h2>\\r\\n            </ion-text>\\r\\n            <ion-text>\\r\\n              <p>{{conversation.message}}</p>\\r\\n            </ion-text>\\r\\n          </ion-label>\\r\\n        </div>\\r\\n        <div slot=\\\"end\\\" style=\\\"display: flex;flex-direction: column;align-items: flex-end;\\\">\\r\\n          <ion-badge color=\\\"danger\\\" *ngIf=\\\"conversation.unreadMessagesCount > 0\\\">\\r\\n            {{conversation.unreadMessagesCount}}\\r\\n          </ion-badge>\\r\\n          <ion-text style=\\\"color: #777;font-size: 12px;\\\">{{conversation.date | DateFormat}}</ion-text>\\r\\n        </div>\\r\\n      </ion-item>\\r\\n    </div>\\r\\n  </ion-list>\\r\\n\\r\\n</ion-content>\"","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { MessagesPage } from './messages.page';\r\nimport { SharedModule } from '../services/share.module';\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: MessagesPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    SharedModule,\r\n    RouterModule.forChild(routes)\r\n  ],\r\n  declarations: [\r\n    MessagesPage\r\n  ]\r\n})\r\nexport class MessagesPageModule {}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21lc3NhZ2VzL21lc3NhZ2VzLnBhZ2Uuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { LoadingService } from '../services/loading.service';\r\nimport { DataService } from '../services/data.service';\r\nimport { AngularFireAuth } from '@angular/fire/auth';\r\nimport { AngularFirestore } from '@angular/fire/firestore';\r\n\r\n@Component({\r\n  selector: 'app-messages',\r\n  templateUrl: './messages.page.html',\r\n  styleUrls: ['./messages.page.scss'],\r\n})\r\nexport class MessagesPage implements OnInit {\r\n\r\n  conversations: any;\r\n  updateDateTime: any;\r\n  searchFriend: any = '';\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private afAuth: AngularFireAuth,\r\n    private firestore: AngularFirestore,\r\n    private loadingProvider: LoadingService,\r\n    private dataProvider: DataService\r\n  ) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  ionViewDidEnter() {\r\n    this.loadingProvider.show();\r\n\r\n    // Get info of conversations of current logged in user.\r\n    this.dataProvider.getConversations().snapshotChanges().subscribe((conversationsInfoRes: any) => {\r\n      let conversations = [];\r\n      console.log('conversationsInfoRes',conversationsInfoRes);\r\n      conversations = conversationsInfoRes.map(c => ({ key: c.payload.doc.id, ...c.payload.doc.data() }));\r\n      \r\n      console.log('conversations:', conversations);\r\n      if (conversations.length > 0) {\r\n        conversations.forEach((conversation) => {\r\n          console.log('conversation',conversation);\r\n          if (conversation) {\r\n            // Get conversation partner info.\r\n            this.dataProvider.getUser(conversation.key).get().subscribe((user) => {\r\n              conversation.friend = user.data();\r\n              // Get conversation info.\r\n\r\n              this.dataProvider.getConversation(conversation.conversationId).snapshotChanges().subscribe((obj: any) => {\r\n                // Get last message of conversation.\r\n                console.log(obj.payload.data());\r\n                if (obj.payload.data() != null) {\r\n                  let lastMessage = obj.payload.data().messages[obj.payload.data().messages.length - 1];\r\n                  conversation.date = lastMessage.date;\r\n                  conversation.sender = lastMessage.sender;\r\n                  // Set unreadMessagesCount\r\n                  conversation.unreadMessagesCount = obj.payload.data().messages.length - conversation.messagesRead;\r\n                  console.log(obj.payload.data().messages.length + \"-\" + conversation.messagesRead);\r\n                  console.log(conversation.unreadMessagesCount);\r\n                  // Process last message depending on messageType.\r\n                  if (lastMessage.type == 'text') {\r\n                    if (lastMessage.sender == this.afAuth.auth.currentUser.uid) {\r\n                      conversation.message = 'You: ' + lastMessage.message;\r\n                    } else {\r\n                      conversation.message = lastMessage.message;\r\n                    }\r\n                  } else {\r\n                    if (lastMessage.sender == this.afAuth.auth.currentUser.uid) {\r\n                      conversation.message = 'You sent a photo message.';\r\n                    } else {\r\n                      conversation.message = 'has sent you a photo message.';\r\n                    }\r\n                  }\r\n                  // Add or update conversation.\r\n                  this.addOrUpdateConversation(conversation);\r\n                }\r\n              });\r\n            });\r\n          }\r\n\r\n        });\r\n\r\n        this.loadingProvider.hide();\r\n      }\r\n      else {\r\n        this.conversations = [];\r\n        this.loadingProvider.hide();\r\n      }\r\n    });\r\n\r\n    // Update conversations' last active date time elapsed every minute based on Moment.js.\r\n    var that = this;\r\n    if (!that.updateDateTime) {\r\n      that.updateDateTime = setInterval(function () {\r\n        if (that.conversations) {\r\n          that.conversations.forEach((conversation) => {\r\n            let date = conversation.date;\r\n            conversation.date = new Date(date);\r\n          });\r\n        }\r\n      }, 60000);\r\n    }\r\n  }\r\n\r\n  // Add or update conversation for real-time sync based on our observer, sort by active date.\r\n  addOrUpdateConversation(conversation) {\r\n    if (!this.conversations) {\r\n      this.conversations = [conversation];\r\n    } else {\r\n      var index = -1;\r\n      for (var i = 0; i < this.conversations.length; i++) {\r\n        if (this.conversations[i].key == conversation.key) {\r\n          index = i;\r\n        }\r\n      }\r\n      if (index > -1) {\r\n        this.conversations[index] = conversation;\r\n      } else {\r\n        this.conversations.push(conversation);\r\n      }\r\n      // Sort by last active date.\r\n      this.conversations.sort((a: any, b: any) => {\r\n        let date1 = new Date(a.date);\r\n        let date2 = new Date(b.date);\r\n        if (date1 > date2) {\r\n          return -1;\r\n        } else if (date1 < date2) {\r\n          return 1;\r\n        } else {\r\n          return 0;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  // Open chat with friend.\r\n  message(userId) {\r\n    this.router.navigateByUrl('/message/' + userId)\r\n    // this.app.getRootNav().push(MessagePage, { userId: userId });\r\n  }\r\n\r\n  // Return class based if conversation has unreadMessages or not.\r\n  hasUnreadMessages(conversation) {\r\n    if (conversation.unreadMessagesCount > 0) {\r\n      return 'bold';\r\n    } else\r\n      return '';\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"webpack:///","file":"messages-messages-module-es5.js"}