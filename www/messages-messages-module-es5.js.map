{"version":3,"sources":["webpack:///src/app/messages/messages.page.ts","webpack:///src/app/messages/messages.page.html","webpack:///src/app/messages/messages.module.ts","webpack:///src/app/messages/messages.page.scss"],"names":["MessagesPage","router","afAuth","firestore","loadingProvider","dataProvider","searchFriend","ngOnInit","ionViewDidEnter","show","getConversations","snapshotChanges","subscribe","conversationsInfoRes","conversations","console","log","map","c","key","payload","doc","id","data","length","forEach","conversation","getUser","get","user","friend","getConversation","conversationId","obj","lastMessage","messages","date","sender","unreadMessagesCount","messagesRead","currentUser","then","u","uid","userId","type","message","addOrUpdateConversation","hide","that","updateDateTime","setInterval","Date","index","i","push","sort","a","b","date1","date2","navigateByUrl","hasUnreadMessages","selector","template","routes","path","component","MessagesPageModule","imports","forChild","declarations"],"mappings":"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","file":"messages-messages-module-es5.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { LoadingService } from '../services/loading.service';\nimport { DataService } from '../services/data.service';\nimport { AngularFireAuth } from '@angular/fire/auth';\nimport { AngularFirestore } from '@angular/fire/firestore';\n\n@Component({\n  selector: 'app-messages',\n  templateUrl: './messages.page.html',\n  styleUrls: ['./messages.page.scss'],\n})\nexport class MessagesPage implements OnInit {\n\n  conversations: any;\n  updateDateTime: any;\n  searchFriend: any = '';\n\n  constructor(\n    private router: Router,\n    private afAuth: AngularFireAuth,\n    private firestore: AngularFirestore,\n    private loadingProvider: LoadingService,\n    private dataProvider: DataService\n  ) { }\n\n  ngOnInit() {\n  }\n\n  ionViewDidEnter() {\n    this.loadingProvider.show();\n\n    // Get info of conversations of current logged in user.\n    this.dataProvider.getConversations().snapshotChanges().subscribe((conversationsInfoRes: any) => {\n      let conversations = [];\n      console.log('conversationsInfoRes',conversationsInfoRes);\n      conversations = conversationsInfoRes.map(c => ({ key: c.payload.doc.id, ...c.payload.doc.data() }));\n      \n      console.log('conversations:', conversations);\n      if (conversations.length > 0) {\n        conversations.forEach((conversation) => {\n          console.log('conversation',conversation);\n          if (conversation) {\n            // Get conversation partner info.\n            this.dataProvider.getUser(conversation.key).get().subscribe((user) => {\n              conversation.friend = user.data();\n              // Get conversation info.\n\n              this.dataProvider.getConversation(conversation.conversationId).snapshotChanges().subscribe(async (obj: any) => {\n                // Get last message of conversation.\n                console.log(obj.payload.data());\n                if (obj.payload.data() != null) {\n                  let lastMessage = obj.payload.data().messages[obj.payload.data().messages.length - 1];\n                  conversation.date = lastMessage.date;\n                  conversation.sender = lastMessage.sender;\n                  // Set unreadMessagesCount\n                  conversation.unreadMessagesCount = obj.payload.data().messages.length - conversation.messagesRead;\n                  console.log(obj.payload.data().messages.length + \"-\" + conversation.messagesRead);\n                  console.log(conversation.unreadMessagesCount);\n                  let userId = await this.afAuth.currentUser.then((u) => { return u.uid});\n                  // Process last message depending on messageType.\n                  if (lastMessage.type == 'text') {\n\n                    if (lastMessage.sender == userId) {\n                      conversation.message = 'You: ' + lastMessage.message;\n                    } else {\n                      conversation.message = lastMessage.message;\n                    }\n                  } else {\n                    if (lastMessage.sender == userId) {\n                      conversation.message = 'You sent a photo message.';\n                    } else {\n                      conversation.message = 'has sent you a photo message.';\n                    }\n                  }\n                  // Add or update conversation.\n                  this.addOrUpdateConversation(conversation);\n                }\n              });\n            });\n          }\n\n        });\n\n        this.loadingProvider.hide();\n      }\n      else {\n        this.conversations = [];\n        this.loadingProvider.hide();\n      }\n    });\n\n    // Update conversations' last active date time elapsed every minute based on Moment.js.\n    var that = this;\n    if (!that.updateDateTime) {\n      that.updateDateTime = setInterval(function () {\n        if (that.conversations) {\n          that.conversations.forEach((conversation) => {\n            let date = conversation.date;\n            conversation.date = new Date(date);\n          });\n        }\n      }, 60000);\n    }\n  }\n\n  // Add or update conversation for real-time sync based on our observer, sort by active date.\n  addOrUpdateConversation(conversation) {\n    if (!this.conversations) {\n      this.conversations = [conversation];\n    } else {\n      var index = -1;\n      for (var i = 0; i < this.conversations.length; i++) {\n        if (this.conversations[i].key == conversation.key) {\n          index = i;\n        }\n      }\n      if (index > -1) {\n        this.conversations[index] = conversation;\n      } else {\n        this.conversations.push(conversation);\n      }\n      // Sort by last active date.\n      this.conversations.sort((a: any, b: any) => {\n        let date1 = new Date(a.date);\n        let date2 = new Date(b.date);\n        if (date1 > date2) {\n          return -1;\n        } else if (date1 < date2) {\n          return 1;\n        } else {\n          return 0;\n        }\n      });\n    }\n  }\n\n  // Open chat with friend.\n  message(userId) {\n    this.router.navigateByUrl('/message/' + userId)\n    // this.app.getRootNav().push(MessagePage, { userId: userId });\n  }\n\n  // Return class based if conversation has unreadMessages or not.\n  hasUnreadMessages(conversation) {\n    if (conversation.unreadMessagesCount > 0) {\n      return 'bold';\n    } else\n      return '';\n  }\n\n}\n","export default \"<ion-header>\\n  <ion-toolbar color=\\\"secondary\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-back-button></ion-back-button>\\n    </ion-buttons>\\n    <ion-title>Messages</ion-title>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <div class=\\\"empty-list\\\" *ngIf=\\\"conversations && conversations.length <= 0\\\">\\n    <h1>\\n      <ion-icon name=\\\"text\\\"></ion-icon>\\n    </h1>\\n    <p>No new conversation yet.</p>\\n  </div>\\n  <!-- Show conversations -->\\n  <ion-list lines=\\\"none\\\" *ngIf=\\\"conversations && conversations.length > 0\\\">\\n    <ion-searchbar [(ngModel)]=\\\"searchFriend\\\" placeholder=\\\"Search for friend or username\\\" showCancelButton=\\\"true\\\"\\n      cancelButtonText=\\\"Done\\\"></ion-searchbar>\\n    <div *ngFor=\\\"let conversation of conversations | conversationFilter:searchFriend\\\"> \\n      <ion-item *ngIf=\\\"conversation.blocked != true\\\" (click)=\\\"message(conversation.key)\\\">\\n\\n        <ion-avatar slot=\\\"start\\\" *ngIf=\\\"conversation.friend\\\">\\n          <img src=\\\"{{conversation.friend.img}}\\\" onError=\\\"this.src='./assets/images/default-dp.png'\\\">\\n        </ion-avatar>\\n        <div [ngClass]=hasUnreadMessages(conversation)>\\n          <ion-label>\\n            <ion-text>\\n              <h2 *ngIf=\\\"conversation.friend\\\">{{conversation.friend.name}}</h2>\\n            </ion-text>\\n            <ion-text>\\n              <p>{{conversation.message}}</p>\\n            </ion-text>\\n          </ion-label>\\n        </div>\\n        <div slot=\\\"end\\\" style=\\\"display: flex;flex-direction: column;align-items: flex-end;\\\">\\n          <ion-badge color=\\\"danger\\\" *ngIf=\\\"conversation.unreadMessagesCount > 0\\\">\\n            {{conversation.unreadMessagesCount}}\\n          </ion-badge>\\n          <ion-text style=\\\"color: #777;font-size: 12px;\\\">{{conversation.date | DateFormat}}</ion-text>\\n        </div>\\n      </ion-item>\\n    </div>\\n  </ion-list>\\n\\n</ion-content>\";","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { MessagesPage } from './messages.page';\nimport { SharedModule } from '../services/share.module';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: MessagesPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    SharedModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [\n    MessagesPage\n  ]\n})\nexport class MessagesPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL21lc3NhZ2VzL21lc3NhZ2VzLnBhZ2Uuc2NzcyJ9 */\";"]}